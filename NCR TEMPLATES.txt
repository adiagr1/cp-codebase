METHOD 1:

// ABOVE MAIN
const int N = 300500;
const int mod = 1000000007;
lli fact[N];
lli invFact[N];

lli fast_pow(lli a, lli p) {
    lli res = 1;
    while (p) {
        if (p % 2 == 0) {
            a = (a * a) % mod;
            p /= 2;
        } else {
            res = (res * a) % mod;
            p--;
        }
    }
    return res;
}

lli ncr(lli n, lli k) {
    if (k > n) {
        return 0;
    }
    return fact[n] * invFact[k] % mod * invFact[n - k] % mod;
}
//Inside main
fact[0] = invFact[0] = 1;
for (int i = 1; i < N; i++) {
    fact[i] = (fact[i - 1] * i) % mod;
    invFact[i] = fast_pow(fact[i], mod - 2);
}


METHOD 2:


// ABOVE MAIN
lli fast_mod_exp(lli a, lli b, lli m) {
    lli res = 1;
    while (b > 0) {
        if (b & 1)
            res = (res * a) % m;

        a = (a * a) % m;
        b = b >> 1;
    }

    return res;
}

lli mod_inverse(lli a, lli m) {
    return fast_mod_exp(a, m - 2, m);
}
const lli N = 2e5+10 , M = 1e9+7;
lli fact[N];
lli ncr(lli n, lli r, lli p) {
    if (r == 0)
        return 1;
    if(r>n)
        return 0;

    return ((fact[n] * mod_inverse(fact[n - r], p)) % p * mod_inverse(fact[r], p)) % p;
}
//Inside main
fact[0] = 1;
fact[1] = 1;
for(lli i=2;i<N;i++)
{
    fact[i] = (fact[i-1]*i)%M; 
}